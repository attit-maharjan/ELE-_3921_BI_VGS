"""
Django settings for BIVGS project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&x!$-x$6zbvb#1#d_4+$!w6s$f4d##kk^c2)7f0xgb)mycp$-y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Custom apps (Explicitly registered with AppConfig)

    # Registers the 'core' app that handles the main structure of the site, including static files, templates, and the common pages like index, about us, and contact.
    'core.apps.CoreConfig',

    # Registers the 'users' app, which manages user-related functionalities such as authentication, user profiles, and roles.
    'users.apps.UsersConfig',

    # Registers the 'academics' app that manages the academic structure, such as courses, departments, semesters, and students’ academic data.
    'academics.apps.AcademicsConfig',

    # Registers the 'examinations' app that handles exam-related functionality, including scheduling, exam results, and grades.
    'examinations.apps.ExaminationsConfig',

      # Registers the 'communications' app that handles internal messaging, notifications, and other forms of communication between users in the system.
    'communications.apps.CommunicationsConfig',

    # Registers the 'reports' app that generates reports and analytics, providing insights into various system data like academic performance, attendance, and fees.
    'reports.apps.ReportsConfig',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'BIVGS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "core.context_processors.school_settings",  # ✅ Use the new context processor
            ],
        },
    },
]

WSGI_APPLICATION = 'BIVGS.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# URL to access static files (CSS, JavaScript, images, etc.)
STATIC_URL = 'static/'

# Directory where static files are stored for development
# This allows Django to find static files inside the "static" folder at the project root
STATICFILES_DIRS = [
    BASE_DIR / "static",                    # This will search static files in the root "static" directory
    BASE_DIR / "communications/static",     # Add this to also search inside communications' static folder
]

# Note:
# 1. During development, Django serves static files from STATICFILES_DIRS.
# 2. In production, use 'collectstatic' to gather static files in STATIC_ROOT (not set here).
# 3. Ensure 'django.contrib.staticfiles' is included in INSTALLED_APPS.



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# MEDIA_URL defines the base URL for serving media files (user uploads like images, PDFs, etc.).
MEDIA_URL = '/media/'

# MEDIA_ROOT specifies the directory where uploaded media files are stored.
# In this case, it is set to a 'media' folder inside the project directory.
MEDIA_ROOT = BASE_DIR / 'media'



# Define the path to the 'data/csv' folder
CSV_DATA_DIR = BASE_DIR / 'data' / 'csv'

AUTHENTICATION_BACKENDS = [
    'users.backends.EmailBackend',  # Custom email backend
    'django.contrib.auth.backends.ModelBackend',  # Default backend
]
